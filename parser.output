Grammar

    0 $accept: PROGRAM $end

    1 PROGRAM: Start

    2 Start: StmtList

    3 StmtList: Stmt StmtList
    4         | ε

    5 Stmt: Decl
    6     | Assi SEMICOLON
    7     | IfStmt
    8     | LoopStmt

    9 Decl: INT IDENT SEMICOLON
   10     | INT IDENT EQUAL Expr SEMICOLON
   11     | FLOAT IDENT SEMICOLON
   12     | FLOAT IDENT EQUAL Expr SEMICOLON
   13     | BOOLEAN IDENT SEMICOLON
   14     | BOOLEAN IDENT EQUAL Expr SEMICOLON
   15     | CHAR IDENT SEMICOLON
   16     | CHAR IDENT EQUAL Expr SEMICOLON

   17 Assi: IDENT EQUAL Expr
   18     | IDENT INC
   19     | IDENT DEC
   20     | IDENT PLUS_EQUAL Expr
   21     | IDENT MINUS_EQUAL Expr
   22     | IDENT MULTIPLY_EQUAL Expr
   23     | IDENT DIVIDE_EQUAL Expr
   24     | IDENT MODULO_EQUAL Expr

   25 Expr: Expr PLUS Term
   26     | Expr MINUS Term
   27     | Term

   28 Term: Term MULTIPLY Factor
   29     | Term DIVIDE Factor
   30     | Term MODULO Factor
   31     | Factor

   32 Factor: OPEN_PARENTHESIS Expr CLOSE_PARENTHESIS
   33       | IDENT
   34       | INT_LITERAL
   35       | FLOAT_LITERAL
   36       | CHAR_LITERAL
   37       | TRUE
   38       | FALSE
   39       | IDENT INC
   40       | IDENT DEC
   41       | INC IDENT
   42       | DEC IDENT
   43       | MINUS Factor

   44 CondExpr: Expr RelOp Expr
   45         | NOT Expr
   46         | Expr AND Expr
   47         | Expr OR Expr
   48         | OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS

   49 RelOp: EQUAL
   50      | IS_EQUAL
   51      | NOT_EQUAL
   52      | GREATER_THAN
   53      | LESSER_THAN
   54      | EQUAL_GREATER
   55      | EQUAL_LESSER

   56 IfStmt: IF OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS
   57       | IF OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS ELSE OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

   58 LoopStmt: FOR OPEN_PARENTHESIS Init SEMICOLON CondExpr SEMICOLON Assi CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS
   59         | WHILE OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

   60 Init: Assi
   61     | Decl
   62     | ε


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    EQUAL_LESSER (258) 55
    GREATER_THAN (259) 52
    LESSER_THAN (260) 53
    EQUAL (261) 10 12 14 16 17 49
    IS_EQUAL (262) 50
    NOT (263) 45
    NOT_EQUAL (264) 51
    EQUAL_GREATER (265) 54
    PLUS (266) 25
    INC (267) 18 39 41
    PLUS_EQUAL (268) 20
    MINUS (269) 26 43
    DEC (270) 19 40 42
    MINUS_EQUAL (271) 21
    DIVIDE (272) 29
    DIVIDE_EQUAL (273) 23
    MULTIPLY (274) 28
    MULTIPLY_EQUAL (275) 22
    MODULO (276) 30
    MODULO_EQUAL (277) 24
    OPEN_PARENTHESIS (278) 32 48 56 57 58 59
    CLOSE_PARENTHESIS (279) 32 48 56 57 58 59
    OPEN_CURLY_BRACKETS (280) 56 57 58 59
    CLOSE_CURLY_BRACKETS (281) 56 57 58 59
    FLOAT_LITERAL (282) 35
    TRUE (283) 37
    FALSE (284) 38
    INT_LITERAL (285) 34
    CHAR_LITERAL (286) 36
    FLOAT (287) 11 12
    INT (288) 9 10
    CHAR (289) 15 16
    BOOLEAN (290) 13 14
    IF (291) 56 57
    ELSE (292) 57
    AND (293) 46
    OR (294) 47
    FOR (295) 58
    WHILE (296) 59
    IDENT (297) 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 33 39 40 41 42
    SEMICOLON (298) 6 9 10 11 12 13 14 15 16 58


Nonterminals, with rules where they appear

    $accept (44)
        on left: 0
    PROGRAM (45)
        on left: 1
        on right: 0
    Start (46)
        on left: 2
        on right: 1
    StmtList (47)
        on left: 3 4
        on right: 2 3 56 57 58 59
    Stmt (48)
        on left: 5 6 7 8
        on right: 3
    Decl (49)
        on left: 9 10 11 12 13 14 15 16
        on right: 5 61
    Assi (50)
        on left: 17 18 19 20 21 22 23 24
        on right: 6 58 60
    Expr (51)
        on left: 25 26 27
        on right: 10 12 14 16 17 20 21 22 23 24 25 26 32 44 45 46 47
    Term (52)
        on left: 28 29 30 31
        on right: 25 26 27 28 29 30
    Factor (53)
        on left: 32 33 34 35 36 37 38 39 40 41 42 43
        on right: 28 29 30 31 43
    CondExpr (54)
        on left: 44 45 46 47 48
        on right: 48 56 57 58 59
    RelOp (55)
        on left: 49 50 51 52 53 54 55
        on right: 44
    IfStmt (56)
        on left: 56 57
        on right: 7
    LoopStmt (57)
        on left: 58 59
        on right: 8
    Init (58)
        on left: 60 61 62
        on right: 58


State 0

    0 $accept: • PROGRAM $end

    FLOAT    shift, and go to state 1
    INT      shift, and go to state 2
    CHAR     shift, and go to state 3
    BOOLEAN  shift, and go to state 4
    IF       shift, and go to state 5
    FOR      shift, and go to state 6
    WHILE    shift, and go to state 7
    IDENT    shift, and go to state 8

    $end  reduce using rule 4 (StmtList)

    PROGRAM   go to state 9
    Start     go to state 10
    StmtList  go to state 11
    Stmt      go to state 12
    Decl      go to state 13
    Assi      go to state 14
    IfStmt    go to state 15
    LoopStmt  go to state 16


State 1

   11 Decl: FLOAT • IDENT SEMICOLON
   12     | FLOAT • IDENT EQUAL Expr SEMICOLON

    IDENT  shift, and go to state 17


State 2

    9 Decl: INT • IDENT SEMICOLON
   10     | INT • IDENT EQUAL Expr SEMICOLON

    IDENT  shift, and go to state 18


State 3

   15 Decl: CHAR • IDENT SEMICOLON
   16     | CHAR • IDENT EQUAL Expr SEMICOLON

    IDENT  shift, and go to state 19


State 4

   13 Decl: BOOLEAN • IDENT SEMICOLON
   14     | BOOLEAN • IDENT EQUAL Expr SEMICOLON

    IDENT  shift, and go to state 20


State 5

   56 IfStmt: IF • OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS
   57       | IF • OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS ELSE OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

    OPEN_PARENTHESIS  shift, and go to state 21


State 6

   58 LoopStmt: FOR • OPEN_PARENTHESIS Init SEMICOLON CondExpr SEMICOLON Assi CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

    OPEN_PARENTHESIS  shift, and go to state 22


State 7

   59 LoopStmt: WHILE • OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

    OPEN_PARENTHESIS  shift, and go to state 23


State 8

   17 Assi: IDENT • EQUAL Expr
   18     | IDENT • INC
   19     | IDENT • DEC
   20     | IDENT • PLUS_EQUAL Expr
   21     | IDENT • MINUS_EQUAL Expr
   22     | IDENT • MULTIPLY_EQUAL Expr
   23     | IDENT • DIVIDE_EQUAL Expr
   24     | IDENT • MODULO_EQUAL Expr

    EQUAL           shift, and go to state 24
    INC             shift, and go to state 25
    PLUS_EQUAL      shift, and go to state 26
    DEC             shift, and go to state 27
    MINUS_EQUAL     shift, and go to state 28
    DIVIDE_EQUAL    shift, and go to state 29
    MULTIPLY_EQUAL  shift, and go to state 30
    MODULO_EQUAL    shift, and go to state 31


State 9

    0 $accept: PROGRAM • $end

    $end  shift, and go to state 32


State 10

    1 PROGRAM: Start •

    $end  reduce using rule 1 (PROGRAM)


State 11

    2 Start: StmtList •

    $end  reduce using rule 2 (Start)


State 12

    3 StmtList: Stmt • StmtList

    FLOAT    shift, and go to state 1
    INT      shift, and go to state 2
    CHAR     shift, and go to state 3
    BOOLEAN  shift, and go to state 4
    IF       shift, and go to state 5
    FOR      shift, and go to state 6
    WHILE    shift, and go to state 7
    IDENT    shift, and go to state 8

    $end                  reduce using rule 4 (StmtList)
    CLOSE_CURLY_BRACKETS  reduce using rule 4 (StmtList)

    StmtList  go to state 33
    Stmt      go to state 12
    Decl      go to state 13
    Assi      go to state 14
    IfStmt    go to state 15
    LoopStmt  go to state 16


State 13

    5 Stmt: Decl •

    $end                  reduce using rule 5 (Stmt)
    CLOSE_CURLY_BRACKETS  reduce using rule 5 (Stmt)
    FLOAT                 reduce using rule 5 (Stmt)
    INT                   reduce using rule 5 (Stmt)
    CHAR                  reduce using rule 5 (Stmt)
    BOOLEAN               reduce using rule 5 (Stmt)
    IF                    reduce using rule 5 (Stmt)
    FOR                   reduce using rule 5 (Stmt)
    WHILE                 reduce using rule 5 (Stmt)
    IDENT                 reduce using rule 5 (Stmt)


State 14

    6 Stmt: Assi • SEMICOLON

    SEMICOLON  shift, and go to state 34


State 15

    7 Stmt: IfStmt •

    $end                  reduce using rule 7 (Stmt)
    CLOSE_CURLY_BRACKETS  reduce using rule 7 (Stmt)
    FLOAT                 reduce using rule 7 (Stmt)
    INT                   reduce using rule 7 (Stmt)
    CHAR                  reduce using rule 7 (Stmt)
    BOOLEAN               reduce using rule 7 (Stmt)
    IF                    reduce using rule 7 (Stmt)
    FOR                   reduce using rule 7 (Stmt)
    WHILE                 reduce using rule 7 (Stmt)
    IDENT                 reduce using rule 7 (Stmt)


State 16

    8 Stmt: LoopStmt •

    $end                  reduce using rule 8 (Stmt)
    CLOSE_CURLY_BRACKETS  reduce using rule 8 (Stmt)
    FLOAT                 reduce using rule 8 (Stmt)
    INT                   reduce using rule 8 (Stmt)
    CHAR                  reduce using rule 8 (Stmt)
    BOOLEAN               reduce using rule 8 (Stmt)
    IF                    reduce using rule 8 (Stmt)
    FOR                   reduce using rule 8 (Stmt)
    WHILE                 reduce using rule 8 (Stmt)
    IDENT                 reduce using rule 8 (Stmt)


State 17

   11 Decl: FLOAT IDENT • SEMICOLON
   12     | FLOAT IDENT • EQUAL Expr SEMICOLON

    EQUAL      shift, and go to state 35
    SEMICOLON  shift, and go to state 36


State 18

    9 Decl: INT IDENT • SEMICOLON
   10     | INT IDENT • EQUAL Expr SEMICOLON

    EQUAL      shift, and go to state 37
    SEMICOLON  shift, and go to state 38


State 19

   15 Decl: CHAR IDENT • SEMICOLON
   16     | CHAR IDENT • EQUAL Expr SEMICOLON

    EQUAL      shift, and go to state 39
    SEMICOLON  shift, and go to state 40


State 20

   13 Decl: BOOLEAN IDENT • SEMICOLON
   14     | BOOLEAN IDENT • EQUAL Expr SEMICOLON

    EQUAL      shift, and go to state 41
    SEMICOLON  shift, and go to state 42


State 21

   56 IfStmt: IF OPEN_PARENTHESIS • CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS
   57       | IF OPEN_PARENTHESIS • CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS ELSE OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

    NOT               shift, and go to state 43
    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 47
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Expr      go to state 54
    Term      go to state 55
    Factor    go to state 56
    CondExpr  go to state 57


State 22

   58 LoopStmt: FOR OPEN_PARENTHESIS • Init SEMICOLON CondExpr SEMICOLON Assi CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

    FLOAT    shift, and go to state 1
    INT      shift, and go to state 2
    CHAR     shift, and go to state 3
    BOOLEAN  shift, and go to state 4
    IDENT    shift, and go to state 8

    SEMICOLON  reduce using rule 62 (Init)

    Decl  go to state 58
    Assi  go to state 59
    Init  go to state 60


State 23

   59 LoopStmt: WHILE OPEN_PARENTHESIS • CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

    NOT               shift, and go to state 43
    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 47
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Expr      go to state 54
    Term      go to state 55
    Factor    go to state 56
    CondExpr  go to state 61


State 24

   17 Assi: IDENT EQUAL • Expr

    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 62
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Expr    go to state 63
    Term    go to state 55
    Factor  go to state 56


State 25

   18 Assi: IDENT INC •

    CLOSE_PARENTHESIS  reduce using rule 18 (Assi)
    SEMICOLON          reduce using rule 18 (Assi)


State 26

   20 Assi: IDENT PLUS_EQUAL • Expr

    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 62
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Expr    go to state 64
    Term    go to state 55
    Factor  go to state 56


State 27

   19 Assi: IDENT DEC •

    CLOSE_PARENTHESIS  reduce using rule 19 (Assi)
    SEMICOLON          reduce using rule 19 (Assi)


State 28

   21 Assi: IDENT MINUS_EQUAL • Expr

    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 62
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Expr    go to state 65
    Term    go to state 55
    Factor  go to state 56


State 29

   23 Assi: IDENT DIVIDE_EQUAL • Expr

    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 62
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Expr    go to state 66
    Term    go to state 55
    Factor  go to state 56


State 30

   22 Assi: IDENT MULTIPLY_EQUAL • Expr

    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 62
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Expr    go to state 67
    Term    go to state 55
    Factor  go to state 56


State 31

   24 Assi: IDENT MODULO_EQUAL • Expr

    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 62
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Expr    go to state 68
    Term    go to state 55
    Factor  go to state 56


State 32

    0 $accept: PROGRAM $end •

    $default  accept


State 33

    3 StmtList: Stmt StmtList •

    $end                  reduce using rule 3 (StmtList)
    CLOSE_CURLY_BRACKETS  reduce using rule 3 (StmtList)


State 34

    6 Stmt: Assi SEMICOLON •

    $end                  reduce using rule 6 (Stmt)
    CLOSE_CURLY_BRACKETS  reduce using rule 6 (Stmt)
    FLOAT                 reduce using rule 6 (Stmt)
    INT                   reduce using rule 6 (Stmt)
    CHAR                  reduce using rule 6 (Stmt)
    BOOLEAN               reduce using rule 6 (Stmt)
    IF                    reduce using rule 6 (Stmt)
    FOR                   reduce using rule 6 (Stmt)
    WHILE                 reduce using rule 6 (Stmt)
    IDENT                 reduce using rule 6 (Stmt)


State 35

   12 Decl: FLOAT IDENT EQUAL • Expr SEMICOLON

    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 62
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Expr    go to state 69
    Term    go to state 55
    Factor  go to state 56


State 36

   11 Decl: FLOAT IDENT SEMICOLON •

    $end                  reduce using rule 11 (Decl)
    CLOSE_CURLY_BRACKETS  reduce using rule 11 (Decl)
    FLOAT                 reduce using rule 11 (Decl)
    INT                   reduce using rule 11 (Decl)
    CHAR                  reduce using rule 11 (Decl)
    BOOLEAN               reduce using rule 11 (Decl)
    IF                    reduce using rule 11 (Decl)
    FOR                   reduce using rule 11 (Decl)
    WHILE                 reduce using rule 11 (Decl)
    IDENT                 reduce using rule 11 (Decl)
    SEMICOLON             reduce using rule 11 (Decl)


State 37

   10 Decl: INT IDENT EQUAL • Expr SEMICOLON

    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 62
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Expr    go to state 70
    Term    go to state 55
    Factor  go to state 56


State 38

    9 Decl: INT IDENT SEMICOLON •

    $end                  reduce using rule 9 (Decl)
    CLOSE_CURLY_BRACKETS  reduce using rule 9 (Decl)
    FLOAT                 reduce using rule 9 (Decl)
    INT                   reduce using rule 9 (Decl)
    CHAR                  reduce using rule 9 (Decl)
    BOOLEAN               reduce using rule 9 (Decl)
    IF                    reduce using rule 9 (Decl)
    FOR                   reduce using rule 9 (Decl)
    WHILE                 reduce using rule 9 (Decl)
    IDENT                 reduce using rule 9 (Decl)
    SEMICOLON             reduce using rule 9 (Decl)


State 39

   16 Decl: CHAR IDENT EQUAL • Expr SEMICOLON

    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 62
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Expr    go to state 71
    Term    go to state 55
    Factor  go to state 56


State 40

   15 Decl: CHAR IDENT SEMICOLON •

    $end                  reduce using rule 15 (Decl)
    CLOSE_CURLY_BRACKETS  reduce using rule 15 (Decl)
    FLOAT                 reduce using rule 15 (Decl)
    INT                   reduce using rule 15 (Decl)
    CHAR                  reduce using rule 15 (Decl)
    BOOLEAN               reduce using rule 15 (Decl)
    IF                    reduce using rule 15 (Decl)
    FOR                   reduce using rule 15 (Decl)
    WHILE                 reduce using rule 15 (Decl)
    IDENT                 reduce using rule 15 (Decl)
    SEMICOLON             reduce using rule 15 (Decl)


State 41

   14 Decl: BOOLEAN IDENT EQUAL • Expr SEMICOLON

    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 62
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Expr    go to state 72
    Term    go to state 55
    Factor  go to state 56


State 42

   13 Decl: BOOLEAN IDENT SEMICOLON •

    $end                  reduce using rule 13 (Decl)
    CLOSE_CURLY_BRACKETS  reduce using rule 13 (Decl)
    FLOAT                 reduce using rule 13 (Decl)
    INT                   reduce using rule 13 (Decl)
    CHAR                  reduce using rule 13 (Decl)
    BOOLEAN               reduce using rule 13 (Decl)
    IF                    reduce using rule 13 (Decl)
    FOR                   reduce using rule 13 (Decl)
    WHILE                 reduce using rule 13 (Decl)
    IDENT                 reduce using rule 13 (Decl)
    SEMICOLON             reduce using rule 13 (Decl)


State 43

   45 CondExpr: NOT • Expr

    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 62
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Expr    go to state 73
    Term    go to state 55
    Factor  go to state 56


State 44

   41 Factor: INC • IDENT

    IDENT  shift, and go to state 74


State 45

   43 Factor: MINUS • Factor

    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 62
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Factor  go to state 75


State 46

   42 Factor: DEC • IDENT

    IDENT  shift, and go to state 76


State 47

   32 Factor: OPEN_PARENTHESIS • Expr CLOSE_PARENTHESIS
   48 CondExpr: OPEN_PARENTHESIS • CondExpr CLOSE_PARENTHESIS

    NOT               shift, and go to state 43
    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 47
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Expr      go to state 77
    Term      go to state 55
    Factor    go to state 56
    CondExpr  go to state 78


State 48

   35 Factor: FLOAT_LITERAL •

    EQUAL_LESSER       reduce using rule 35 (Factor)
    GREATER_THAN       reduce using rule 35 (Factor)
    LESSER_THAN        reduce using rule 35 (Factor)
    EQUAL              reduce using rule 35 (Factor)
    IS_EQUAL           reduce using rule 35 (Factor)
    NOT_EQUAL          reduce using rule 35 (Factor)
    EQUAL_GREATER      reduce using rule 35 (Factor)
    PLUS               reduce using rule 35 (Factor)
    MINUS              reduce using rule 35 (Factor)
    DIVIDE             reduce using rule 35 (Factor)
    MULTIPLY           reduce using rule 35 (Factor)
    MODULO             reduce using rule 35 (Factor)
    CLOSE_PARENTHESIS  reduce using rule 35 (Factor)
    AND                reduce using rule 35 (Factor)
    OR                 reduce using rule 35 (Factor)
    SEMICOLON          reduce using rule 35 (Factor)


State 49

   37 Factor: TRUE •

    EQUAL_LESSER       reduce using rule 37 (Factor)
    GREATER_THAN       reduce using rule 37 (Factor)
    LESSER_THAN        reduce using rule 37 (Factor)
    EQUAL              reduce using rule 37 (Factor)
    IS_EQUAL           reduce using rule 37 (Factor)
    NOT_EQUAL          reduce using rule 37 (Factor)
    EQUAL_GREATER      reduce using rule 37 (Factor)
    PLUS               reduce using rule 37 (Factor)
    MINUS              reduce using rule 37 (Factor)
    DIVIDE             reduce using rule 37 (Factor)
    MULTIPLY           reduce using rule 37 (Factor)
    MODULO             reduce using rule 37 (Factor)
    CLOSE_PARENTHESIS  reduce using rule 37 (Factor)
    AND                reduce using rule 37 (Factor)
    OR                 reduce using rule 37 (Factor)
    SEMICOLON          reduce using rule 37 (Factor)


State 50

   38 Factor: FALSE •

    EQUAL_LESSER       reduce using rule 38 (Factor)
    GREATER_THAN       reduce using rule 38 (Factor)
    LESSER_THAN        reduce using rule 38 (Factor)
    EQUAL              reduce using rule 38 (Factor)
    IS_EQUAL           reduce using rule 38 (Factor)
    NOT_EQUAL          reduce using rule 38 (Factor)
    EQUAL_GREATER      reduce using rule 38 (Factor)
    PLUS               reduce using rule 38 (Factor)
    MINUS              reduce using rule 38 (Factor)
    DIVIDE             reduce using rule 38 (Factor)
    MULTIPLY           reduce using rule 38 (Factor)
    MODULO             reduce using rule 38 (Factor)
    CLOSE_PARENTHESIS  reduce using rule 38 (Factor)
    AND                reduce using rule 38 (Factor)
    OR                 reduce using rule 38 (Factor)
    SEMICOLON          reduce using rule 38 (Factor)


State 51

   34 Factor: INT_LITERAL •

    EQUAL_LESSER       reduce using rule 34 (Factor)
    GREATER_THAN       reduce using rule 34 (Factor)
    LESSER_THAN        reduce using rule 34 (Factor)
    EQUAL              reduce using rule 34 (Factor)
    IS_EQUAL           reduce using rule 34 (Factor)
    NOT_EQUAL          reduce using rule 34 (Factor)
    EQUAL_GREATER      reduce using rule 34 (Factor)
    PLUS               reduce using rule 34 (Factor)
    MINUS              reduce using rule 34 (Factor)
    DIVIDE             reduce using rule 34 (Factor)
    MULTIPLY           reduce using rule 34 (Factor)
    MODULO             reduce using rule 34 (Factor)
    CLOSE_PARENTHESIS  reduce using rule 34 (Factor)
    AND                reduce using rule 34 (Factor)
    OR                 reduce using rule 34 (Factor)
    SEMICOLON          reduce using rule 34 (Factor)


State 52

   36 Factor: CHAR_LITERAL •

    EQUAL_LESSER       reduce using rule 36 (Factor)
    GREATER_THAN       reduce using rule 36 (Factor)
    LESSER_THAN        reduce using rule 36 (Factor)
    EQUAL              reduce using rule 36 (Factor)
    IS_EQUAL           reduce using rule 36 (Factor)
    NOT_EQUAL          reduce using rule 36 (Factor)
    EQUAL_GREATER      reduce using rule 36 (Factor)
    PLUS               reduce using rule 36 (Factor)
    MINUS              reduce using rule 36 (Factor)
    DIVIDE             reduce using rule 36 (Factor)
    MULTIPLY           reduce using rule 36 (Factor)
    MODULO             reduce using rule 36 (Factor)
    CLOSE_PARENTHESIS  reduce using rule 36 (Factor)
    AND                reduce using rule 36 (Factor)
    OR                 reduce using rule 36 (Factor)
    SEMICOLON          reduce using rule 36 (Factor)


State 53

   33 Factor: IDENT •
   39       | IDENT • INC
   40       | IDENT • DEC

    INC  shift, and go to state 79
    DEC  shift, and go to state 80

    EQUAL_LESSER       reduce using rule 33 (Factor)
    GREATER_THAN       reduce using rule 33 (Factor)
    LESSER_THAN        reduce using rule 33 (Factor)
    EQUAL              reduce using rule 33 (Factor)
    IS_EQUAL           reduce using rule 33 (Factor)
    NOT_EQUAL          reduce using rule 33 (Factor)
    EQUAL_GREATER      reduce using rule 33 (Factor)
    PLUS               reduce using rule 33 (Factor)
    MINUS              reduce using rule 33 (Factor)
    DIVIDE             reduce using rule 33 (Factor)
    MULTIPLY           reduce using rule 33 (Factor)
    MODULO             reduce using rule 33 (Factor)
    CLOSE_PARENTHESIS  reduce using rule 33 (Factor)
    AND                reduce using rule 33 (Factor)
    OR                 reduce using rule 33 (Factor)
    SEMICOLON          reduce using rule 33 (Factor)


State 54

   25 Expr: Expr • PLUS Term
   26     | Expr • MINUS Term
   44 CondExpr: Expr • RelOp Expr
   46         | Expr • AND Expr
   47         | Expr • OR Expr

    EQUAL_LESSER   shift, and go to state 81
    GREATER_THAN   shift, and go to state 82
    LESSER_THAN    shift, and go to state 83
    EQUAL          shift, and go to state 84
    IS_EQUAL       shift, and go to state 85
    NOT_EQUAL      shift, and go to state 86
    EQUAL_GREATER  shift, and go to state 87
    PLUS           shift, and go to state 88
    MINUS          shift, and go to state 89
    AND            shift, and go to state 90
    OR             shift, and go to state 91

    RelOp  go to state 92


State 55

   27 Expr: Term •
   28 Term: Term • MULTIPLY Factor
   29     | Term • DIVIDE Factor
   30     | Term • MODULO Factor

    DIVIDE    shift, and go to state 93
    MULTIPLY  shift, and go to state 94
    MODULO    shift, and go to state 95

    EQUAL_LESSER       reduce using rule 27 (Expr)
    GREATER_THAN       reduce using rule 27 (Expr)
    LESSER_THAN        reduce using rule 27 (Expr)
    EQUAL              reduce using rule 27 (Expr)
    IS_EQUAL           reduce using rule 27 (Expr)
    NOT_EQUAL          reduce using rule 27 (Expr)
    EQUAL_GREATER      reduce using rule 27 (Expr)
    PLUS               reduce using rule 27 (Expr)
    MINUS              reduce using rule 27 (Expr)
    CLOSE_PARENTHESIS  reduce using rule 27 (Expr)
    AND                reduce using rule 27 (Expr)
    OR                 reduce using rule 27 (Expr)
    SEMICOLON          reduce using rule 27 (Expr)


State 56

   31 Term: Factor •

    EQUAL_LESSER       reduce using rule 31 (Term)
    GREATER_THAN       reduce using rule 31 (Term)
    LESSER_THAN        reduce using rule 31 (Term)
    EQUAL              reduce using rule 31 (Term)
    IS_EQUAL           reduce using rule 31 (Term)
    NOT_EQUAL          reduce using rule 31 (Term)
    EQUAL_GREATER      reduce using rule 31 (Term)
    PLUS               reduce using rule 31 (Term)
    MINUS              reduce using rule 31 (Term)
    DIVIDE             reduce using rule 31 (Term)
    MULTIPLY           reduce using rule 31 (Term)
    MODULO             reduce using rule 31 (Term)
    CLOSE_PARENTHESIS  reduce using rule 31 (Term)
    AND                reduce using rule 31 (Term)
    OR                 reduce using rule 31 (Term)
    SEMICOLON          reduce using rule 31 (Term)


State 57

   56 IfStmt: IF OPEN_PARENTHESIS CondExpr • CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS
   57       | IF OPEN_PARENTHESIS CondExpr • CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS ELSE OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

    CLOSE_PARENTHESIS  shift, and go to state 96


State 58

   61 Init: Decl •

    SEMICOLON  reduce using rule 61 (Init)


State 59

   60 Init: Assi •

    SEMICOLON  reduce using rule 60 (Init)


State 60

   58 LoopStmt: FOR OPEN_PARENTHESIS Init • SEMICOLON CondExpr SEMICOLON Assi CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

    SEMICOLON  shift, and go to state 97


State 61

   59 LoopStmt: WHILE OPEN_PARENTHESIS CondExpr • CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

    CLOSE_PARENTHESIS  shift, and go to state 98


State 62

   32 Factor: OPEN_PARENTHESIS • Expr CLOSE_PARENTHESIS

    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 62
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Expr    go to state 99
    Term    go to state 55
    Factor  go to state 56


State 63

   17 Assi: IDENT EQUAL Expr •
   25 Expr: Expr • PLUS Term
   26     | Expr • MINUS Term

    PLUS   shift, and go to state 88
    MINUS  shift, and go to state 89

    CLOSE_PARENTHESIS  reduce using rule 17 (Assi)
    SEMICOLON          reduce using rule 17 (Assi)


State 64

   20 Assi: IDENT PLUS_EQUAL Expr •
   25 Expr: Expr • PLUS Term
   26     | Expr • MINUS Term

    PLUS   shift, and go to state 88
    MINUS  shift, and go to state 89

    CLOSE_PARENTHESIS  reduce using rule 20 (Assi)
    SEMICOLON          reduce using rule 20 (Assi)


State 65

   21 Assi: IDENT MINUS_EQUAL Expr •
   25 Expr: Expr • PLUS Term
   26     | Expr • MINUS Term

    PLUS   shift, and go to state 88
    MINUS  shift, and go to state 89

    CLOSE_PARENTHESIS  reduce using rule 21 (Assi)
    SEMICOLON          reduce using rule 21 (Assi)


State 66

   23 Assi: IDENT DIVIDE_EQUAL Expr •
   25 Expr: Expr • PLUS Term
   26     | Expr • MINUS Term

    PLUS   shift, and go to state 88
    MINUS  shift, and go to state 89

    CLOSE_PARENTHESIS  reduce using rule 23 (Assi)
    SEMICOLON          reduce using rule 23 (Assi)


State 67

   22 Assi: IDENT MULTIPLY_EQUAL Expr •
   25 Expr: Expr • PLUS Term
   26     | Expr • MINUS Term

    PLUS   shift, and go to state 88
    MINUS  shift, and go to state 89

    CLOSE_PARENTHESIS  reduce using rule 22 (Assi)
    SEMICOLON          reduce using rule 22 (Assi)


State 68

   24 Assi: IDENT MODULO_EQUAL Expr •
   25 Expr: Expr • PLUS Term
   26     | Expr • MINUS Term

    PLUS   shift, and go to state 88
    MINUS  shift, and go to state 89

    CLOSE_PARENTHESIS  reduce using rule 24 (Assi)
    SEMICOLON          reduce using rule 24 (Assi)


State 69

   12 Decl: FLOAT IDENT EQUAL Expr • SEMICOLON
   25 Expr: Expr • PLUS Term
   26     | Expr • MINUS Term

    PLUS       shift, and go to state 88
    MINUS      shift, and go to state 89
    SEMICOLON  shift, and go to state 100


State 70

   10 Decl: INT IDENT EQUAL Expr • SEMICOLON
   25 Expr: Expr • PLUS Term
   26     | Expr • MINUS Term

    PLUS       shift, and go to state 88
    MINUS      shift, and go to state 89
    SEMICOLON  shift, and go to state 101


State 71

   16 Decl: CHAR IDENT EQUAL Expr • SEMICOLON
   25 Expr: Expr • PLUS Term
   26     | Expr • MINUS Term

    PLUS       shift, and go to state 88
    MINUS      shift, and go to state 89
    SEMICOLON  shift, and go to state 102


State 72

   14 Decl: BOOLEAN IDENT EQUAL Expr • SEMICOLON
   25 Expr: Expr • PLUS Term
   26     | Expr • MINUS Term

    PLUS       shift, and go to state 88
    MINUS      shift, and go to state 89
    SEMICOLON  shift, and go to state 103


State 73

   25 Expr: Expr • PLUS Term
   26     | Expr • MINUS Term
   45 CondExpr: NOT Expr •

    PLUS   shift, and go to state 88
    MINUS  shift, and go to state 89

    CLOSE_PARENTHESIS  reduce using rule 45 (CondExpr)
    SEMICOLON          reduce using rule 45 (CondExpr)


State 74

   41 Factor: INC IDENT •

    EQUAL_LESSER       reduce using rule 41 (Factor)
    GREATER_THAN       reduce using rule 41 (Factor)
    LESSER_THAN        reduce using rule 41 (Factor)
    EQUAL              reduce using rule 41 (Factor)
    IS_EQUAL           reduce using rule 41 (Factor)
    NOT_EQUAL          reduce using rule 41 (Factor)
    EQUAL_GREATER      reduce using rule 41 (Factor)
    PLUS               reduce using rule 41 (Factor)
    MINUS              reduce using rule 41 (Factor)
    DIVIDE             reduce using rule 41 (Factor)
    MULTIPLY           reduce using rule 41 (Factor)
    MODULO             reduce using rule 41 (Factor)
    CLOSE_PARENTHESIS  reduce using rule 41 (Factor)
    AND                reduce using rule 41 (Factor)
    OR                 reduce using rule 41 (Factor)
    SEMICOLON          reduce using rule 41 (Factor)


State 75

   43 Factor: MINUS Factor •

    EQUAL_LESSER       reduce using rule 43 (Factor)
    GREATER_THAN       reduce using rule 43 (Factor)
    LESSER_THAN        reduce using rule 43 (Factor)
    EQUAL              reduce using rule 43 (Factor)
    IS_EQUAL           reduce using rule 43 (Factor)
    NOT_EQUAL          reduce using rule 43 (Factor)
    EQUAL_GREATER      reduce using rule 43 (Factor)
    PLUS               reduce using rule 43 (Factor)
    MINUS              reduce using rule 43 (Factor)
    DIVIDE             reduce using rule 43 (Factor)
    MULTIPLY           reduce using rule 43 (Factor)
    MODULO             reduce using rule 43 (Factor)
    CLOSE_PARENTHESIS  reduce using rule 43 (Factor)
    AND                reduce using rule 43 (Factor)
    OR                 reduce using rule 43 (Factor)
    SEMICOLON          reduce using rule 43 (Factor)


State 76

   42 Factor: DEC IDENT •

    EQUAL_LESSER       reduce using rule 42 (Factor)
    GREATER_THAN       reduce using rule 42 (Factor)
    LESSER_THAN        reduce using rule 42 (Factor)
    EQUAL              reduce using rule 42 (Factor)
    IS_EQUAL           reduce using rule 42 (Factor)
    NOT_EQUAL          reduce using rule 42 (Factor)
    EQUAL_GREATER      reduce using rule 42 (Factor)
    PLUS               reduce using rule 42 (Factor)
    MINUS              reduce using rule 42 (Factor)
    DIVIDE             reduce using rule 42 (Factor)
    MULTIPLY           reduce using rule 42 (Factor)
    MODULO             reduce using rule 42 (Factor)
    CLOSE_PARENTHESIS  reduce using rule 42 (Factor)
    AND                reduce using rule 42 (Factor)
    OR                 reduce using rule 42 (Factor)
    SEMICOLON          reduce using rule 42 (Factor)


State 77

   25 Expr: Expr • PLUS Term
   26     | Expr • MINUS Term
   32 Factor: OPEN_PARENTHESIS Expr • CLOSE_PARENTHESIS
   44 CondExpr: Expr • RelOp Expr
   46         | Expr • AND Expr
   47         | Expr • OR Expr

    EQUAL_LESSER       shift, and go to state 81
    GREATER_THAN       shift, and go to state 82
    LESSER_THAN        shift, and go to state 83
    EQUAL              shift, and go to state 84
    IS_EQUAL           shift, and go to state 85
    NOT_EQUAL          shift, and go to state 86
    EQUAL_GREATER      shift, and go to state 87
    PLUS               shift, and go to state 88
    MINUS              shift, and go to state 89
    CLOSE_PARENTHESIS  shift, and go to state 104
    AND                shift, and go to state 90
    OR                 shift, and go to state 91

    RelOp  go to state 92


State 78

   48 CondExpr: OPEN_PARENTHESIS CondExpr • CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS  shift, and go to state 105


State 79

   39 Factor: IDENT INC •

    EQUAL_LESSER       reduce using rule 39 (Factor)
    GREATER_THAN       reduce using rule 39 (Factor)
    LESSER_THAN        reduce using rule 39 (Factor)
    EQUAL              reduce using rule 39 (Factor)
    IS_EQUAL           reduce using rule 39 (Factor)
    NOT_EQUAL          reduce using rule 39 (Factor)
    EQUAL_GREATER      reduce using rule 39 (Factor)
    PLUS               reduce using rule 39 (Factor)
    MINUS              reduce using rule 39 (Factor)
    DIVIDE             reduce using rule 39 (Factor)
    MULTIPLY           reduce using rule 39 (Factor)
    MODULO             reduce using rule 39 (Factor)
    CLOSE_PARENTHESIS  reduce using rule 39 (Factor)
    AND                reduce using rule 39 (Factor)
    OR                 reduce using rule 39 (Factor)
    SEMICOLON          reduce using rule 39 (Factor)


State 80

   40 Factor: IDENT DEC •

    EQUAL_LESSER       reduce using rule 40 (Factor)
    GREATER_THAN       reduce using rule 40 (Factor)
    LESSER_THAN        reduce using rule 40 (Factor)
    EQUAL              reduce using rule 40 (Factor)
    IS_EQUAL           reduce using rule 40 (Factor)
    NOT_EQUAL          reduce using rule 40 (Factor)
    EQUAL_GREATER      reduce using rule 40 (Factor)
    PLUS               reduce using rule 40 (Factor)
    MINUS              reduce using rule 40 (Factor)
    DIVIDE             reduce using rule 40 (Factor)
    MULTIPLY           reduce using rule 40 (Factor)
    MODULO             reduce using rule 40 (Factor)
    CLOSE_PARENTHESIS  reduce using rule 40 (Factor)
    AND                reduce using rule 40 (Factor)
    OR                 reduce using rule 40 (Factor)
    SEMICOLON          reduce using rule 40 (Factor)


State 81

   55 RelOp: EQUAL_LESSER •

    INC               reduce using rule 55 (RelOp)
    MINUS             reduce using rule 55 (RelOp)
    DEC               reduce using rule 55 (RelOp)
    OPEN_PARENTHESIS  reduce using rule 55 (RelOp)
    FLOAT_LITERAL     reduce using rule 55 (RelOp)
    TRUE              reduce using rule 55 (RelOp)
    FALSE             reduce using rule 55 (RelOp)
    INT_LITERAL       reduce using rule 55 (RelOp)
    CHAR_LITERAL      reduce using rule 55 (RelOp)
    IDENT             reduce using rule 55 (RelOp)


State 82

   52 RelOp: GREATER_THAN •

    INC               reduce using rule 52 (RelOp)
    MINUS             reduce using rule 52 (RelOp)
    DEC               reduce using rule 52 (RelOp)
    OPEN_PARENTHESIS  reduce using rule 52 (RelOp)
    FLOAT_LITERAL     reduce using rule 52 (RelOp)
    TRUE              reduce using rule 52 (RelOp)
    FALSE             reduce using rule 52 (RelOp)
    INT_LITERAL       reduce using rule 52 (RelOp)
    CHAR_LITERAL      reduce using rule 52 (RelOp)
    IDENT             reduce using rule 52 (RelOp)


State 83

   53 RelOp: LESSER_THAN •

    INC               reduce using rule 53 (RelOp)
    MINUS             reduce using rule 53 (RelOp)
    DEC               reduce using rule 53 (RelOp)
    OPEN_PARENTHESIS  reduce using rule 53 (RelOp)
    FLOAT_LITERAL     reduce using rule 53 (RelOp)
    TRUE              reduce using rule 53 (RelOp)
    FALSE             reduce using rule 53 (RelOp)
    INT_LITERAL       reduce using rule 53 (RelOp)
    CHAR_LITERAL      reduce using rule 53 (RelOp)
    IDENT             reduce using rule 53 (RelOp)


State 84

   49 RelOp: EQUAL •

    INC               reduce using rule 49 (RelOp)
    MINUS             reduce using rule 49 (RelOp)
    DEC               reduce using rule 49 (RelOp)
    OPEN_PARENTHESIS  reduce using rule 49 (RelOp)
    FLOAT_LITERAL     reduce using rule 49 (RelOp)
    TRUE              reduce using rule 49 (RelOp)
    FALSE             reduce using rule 49 (RelOp)
    INT_LITERAL       reduce using rule 49 (RelOp)
    CHAR_LITERAL      reduce using rule 49 (RelOp)
    IDENT             reduce using rule 49 (RelOp)


State 85

   50 RelOp: IS_EQUAL •

    INC               reduce using rule 50 (RelOp)
    MINUS             reduce using rule 50 (RelOp)
    DEC               reduce using rule 50 (RelOp)
    OPEN_PARENTHESIS  reduce using rule 50 (RelOp)
    FLOAT_LITERAL     reduce using rule 50 (RelOp)
    TRUE              reduce using rule 50 (RelOp)
    FALSE             reduce using rule 50 (RelOp)
    INT_LITERAL       reduce using rule 50 (RelOp)
    CHAR_LITERAL      reduce using rule 50 (RelOp)
    IDENT             reduce using rule 50 (RelOp)


State 86

   51 RelOp: NOT_EQUAL •

    INC               reduce using rule 51 (RelOp)
    MINUS             reduce using rule 51 (RelOp)
    DEC               reduce using rule 51 (RelOp)
    OPEN_PARENTHESIS  reduce using rule 51 (RelOp)
    FLOAT_LITERAL     reduce using rule 51 (RelOp)
    TRUE              reduce using rule 51 (RelOp)
    FALSE             reduce using rule 51 (RelOp)
    INT_LITERAL       reduce using rule 51 (RelOp)
    CHAR_LITERAL      reduce using rule 51 (RelOp)
    IDENT             reduce using rule 51 (RelOp)


State 87

   54 RelOp: EQUAL_GREATER •

    INC               reduce using rule 54 (RelOp)
    MINUS             reduce using rule 54 (RelOp)
    DEC               reduce using rule 54 (RelOp)
    OPEN_PARENTHESIS  reduce using rule 54 (RelOp)
    FLOAT_LITERAL     reduce using rule 54 (RelOp)
    TRUE              reduce using rule 54 (RelOp)
    FALSE             reduce using rule 54 (RelOp)
    INT_LITERAL       reduce using rule 54 (RelOp)
    CHAR_LITERAL      reduce using rule 54 (RelOp)
    IDENT             reduce using rule 54 (RelOp)


State 88

   25 Expr: Expr PLUS • Term

    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 62
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Term    go to state 106
    Factor  go to state 56


State 89

   26 Expr: Expr MINUS • Term

    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 62
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Term    go to state 107
    Factor  go to state 56


State 90

   46 CondExpr: Expr AND • Expr

    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 62
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Expr    go to state 108
    Term    go to state 55
    Factor  go to state 56


State 91

   47 CondExpr: Expr OR • Expr

    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 62
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Expr    go to state 109
    Term    go to state 55
    Factor  go to state 56


State 92

   44 CondExpr: Expr RelOp • Expr

    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 62
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Expr    go to state 110
    Term    go to state 55
    Factor  go to state 56


State 93

   29 Term: Term DIVIDE • Factor

    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 62
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Factor  go to state 111


State 94

   28 Term: Term MULTIPLY • Factor

    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 62
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Factor  go to state 112


State 95

   30 Term: Term MODULO • Factor

    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 62
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Factor  go to state 113


State 96

   56 IfStmt: IF OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS • OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS
   57       | IF OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS • OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS ELSE OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

    OPEN_CURLY_BRACKETS  shift, and go to state 114


State 97

   58 LoopStmt: FOR OPEN_PARENTHESIS Init SEMICOLON • CondExpr SEMICOLON Assi CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

    NOT               shift, and go to state 43
    INC               shift, and go to state 44
    MINUS             shift, and go to state 45
    DEC               shift, and go to state 46
    OPEN_PARENTHESIS  shift, and go to state 47
    FLOAT_LITERAL     shift, and go to state 48
    TRUE              shift, and go to state 49
    FALSE             shift, and go to state 50
    INT_LITERAL       shift, and go to state 51
    CHAR_LITERAL      shift, and go to state 52
    IDENT             shift, and go to state 53

    Expr      go to state 54
    Term      go to state 55
    Factor    go to state 56
    CondExpr  go to state 115


State 98

   59 LoopStmt: WHILE OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS • OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

    OPEN_CURLY_BRACKETS  shift, and go to state 116


State 99

   25 Expr: Expr • PLUS Term
   26     | Expr • MINUS Term
   32 Factor: OPEN_PARENTHESIS Expr • CLOSE_PARENTHESIS

    PLUS               shift, and go to state 88
    MINUS              shift, and go to state 89
    CLOSE_PARENTHESIS  shift, and go to state 104


State 100

   12 Decl: FLOAT IDENT EQUAL Expr SEMICOLON •

    $end                  reduce using rule 12 (Decl)
    CLOSE_CURLY_BRACKETS  reduce using rule 12 (Decl)
    FLOAT                 reduce using rule 12 (Decl)
    INT                   reduce using rule 12 (Decl)
    CHAR                  reduce using rule 12 (Decl)
    BOOLEAN               reduce using rule 12 (Decl)
    IF                    reduce using rule 12 (Decl)
    FOR                   reduce using rule 12 (Decl)
    WHILE                 reduce using rule 12 (Decl)
    IDENT                 reduce using rule 12 (Decl)
    SEMICOLON             reduce using rule 12 (Decl)


State 101

   10 Decl: INT IDENT EQUAL Expr SEMICOLON •

    $end                  reduce using rule 10 (Decl)
    CLOSE_CURLY_BRACKETS  reduce using rule 10 (Decl)
    FLOAT                 reduce using rule 10 (Decl)
    INT                   reduce using rule 10 (Decl)
    CHAR                  reduce using rule 10 (Decl)
    BOOLEAN               reduce using rule 10 (Decl)
    IF                    reduce using rule 10 (Decl)
    FOR                   reduce using rule 10 (Decl)
    WHILE                 reduce using rule 10 (Decl)
    IDENT                 reduce using rule 10 (Decl)
    SEMICOLON             reduce using rule 10 (Decl)


State 102

   16 Decl: CHAR IDENT EQUAL Expr SEMICOLON •

    $end                  reduce using rule 16 (Decl)
    CLOSE_CURLY_BRACKETS  reduce using rule 16 (Decl)
    FLOAT                 reduce using rule 16 (Decl)
    INT                   reduce using rule 16 (Decl)
    CHAR                  reduce using rule 16 (Decl)
    BOOLEAN               reduce using rule 16 (Decl)
    IF                    reduce using rule 16 (Decl)
    FOR                   reduce using rule 16 (Decl)
    WHILE                 reduce using rule 16 (Decl)
    IDENT                 reduce using rule 16 (Decl)
    SEMICOLON             reduce using rule 16 (Decl)


State 103

   14 Decl: BOOLEAN IDENT EQUAL Expr SEMICOLON •

    $end                  reduce using rule 14 (Decl)
    CLOSE_CURLY_BRACKETS  reduce using rule 14 (Decl)
    FLOAT                 reduce using rule 14 (Decl)
    INT                   reduce using rule 14 (Decl)
    CHAR                  reduce using rule 14 (Decl)
    BOOLEAN               reduce using rule 14 (Decl)
    IF                    reduce using rule 14 (Decl)
    FOR                   reduce using rule 14 (Decl)
    WHILE                 reduce using rule 14 (Decl)
    IDENT                 reduce using rule 14 (Decl)
    SEMICOLON             reduce using rule 14 (Decl)


State 104

   32 Factor: OPEN_PARENTHESIS Expr CLOSE_PARENTHESIS •

    EQUAL_LESSER       reduce using rule 32 (Factor)
    GREATER_THAN       reduce using rule 32 (Factor)
    LESSER_THAN        reduce using rule 32 (Factor)
    EQUAL              reduce using rule 32 (Factor)
    IS_EQUAL           reduce using rule 32 (Factor)
    NOT_EQUAL          reduce using rule 32 (Factor)
    EQUAL_GREATER      reduce using rule 32 (Factor)
    PLUS               reduce using rule 32 (Factor)
    MINUS              reduce using rule 32 (Factor)
    DIVIDE             reduce using rule 32 (Factor)
    MULTIPLY           reduce using rule 32 (Factor)
    MODULO             reduce using rule 32 (Factor)
    CLOSE_PARENTHESIS  reduce using rule 32 (Factor)
    AND                reduce using rule 32 (Factor)
    OR                 reduce using rule 32 (Factor)
    SEMICOLON          reduce using rule 32 (Factor)


State 105

   48 CondExpr: OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS •

    CLOSE_PARENTHESIS  reduce using rule 48 (CondExpr)
    SEMICOLON          reduce using rule 48 (CondExpr)


State 106

   25 Expr: Expr PLUS Term •
   28 Term: Term • MULTIPLY Factor
   29     | Term • DIVIDE Factor
   30     | Term • MODULO Factor

    DIVIDE    shift, and go to state 93
    MULTIPLY  shift, and go to state 94
    MODULO    shift, and go to state 95

    EQUAL_LESSER       reduce using rule 25 (Expr)
    GREATER_THAN       reduce using rule 25 (Expr)
    LESSER_THAN        reduce using rule 25 (Expr)
    EQUAL              reduce using rule 25 (Expr)
    IS_EQUAL           reduce using rule 25 (Expr)
    NOT_EQUAL          reduce using rule 25 (Expr)
    EQUAL_GREATER      reduce using rule 25 (Expr)
    PLUS               reduce using rule 25 (Expr)
    MINUS              reduce using rule 25 (Expr)
    CLOSE_PARENTHESIS  reduce using rule 25 (Expr)
    AND                reduce using rule 25 (Expr)
    OR                 reduce using rule 25 (Expr)
    SEMICOLON          reduce using rule 25 (Expr)


State 107

   26 Expr: Expr MINUS Term •
   28 Term: Term • MULTIPLY Factor
   29     | Term • DIVIDE Factor
   30     | Term • MODULO Factor

    DIVIDE    shift, and go to state 93
    MULTIPLY  shift, and go to state 94
    MODULO    shift, and go to state 95

    EQUAL_LESSER       reduce using rule 26 (Expr)
    GREATER_THAN       reduce using rule 26 (Expr)
    LESSER_THAN        reduce using rule 26 (Expr)
    EQUAL              reduce using rule 26 (Expr)
    IS_EQUAL           reduce using rule 26 (Expr)
    NOT_EQUAL          reduce using rule 26 (Expr)
    EQUAL_GREATER      reduce using rule 26 (Expr)
    PLUS               reduce using rule 26 (Expr)
    MINUS              reduce using rule 26 (Expr)
    CLOSE_PARENTHESIS  reduce using rule 26 (Expr)
    AND                reduce using rule 26 (Expr)
    OR                 reduce using rule 26 (Expr)
    SEMICOLON          reduce using rule 26 (Expr)


State 108

   25 Expr: Expr • PLUS Term
   26     | Expr • MINUS Term
   46 CondExpr: Expr AND Expr •

    PLUS   shift, and go to state 88
    MINUS  shift, and go to state 89

    CLOSE_PARENTHESIS  reduce using rule 46 (CondExpr)
    SEMICOLON          reduce using rule 46 (CondExpr)


State 109

   25 Expr: Expr • PLUS Term
   26     | Expr • MINUS Term
   47 CondExpr: Expr OR Expr •

    PLUS   shift, and go to state 88
    MINUS  shift, and go to state 89

    CLOSE_PARENTHESIS  reduce using rule 47 (CondExpr)
    SEMICOLON          reduce using rule 47 (CondExpr)


State 110

   25 Expr: Expr • PLUS Term
   26     | Expr • MINUS Term
   44 CondExpr: Expr RelOp Expr •

    PLUS   shift, and go to state 88
    MINUS  shift, and go to state 89

    CLOSE_PARENTHESIS  reduce using rule 44 (CondExpr)
    SEMICOLON          reduce using rule 44 (CondExpr)


State 111

   29 Term: Term DIVIDE Factor •

    EQUAL_LESSER       reduce using rule 29 (Term)
    GREATER_THAN       reduce using rule 29 (Term)
    LESSER_THAN        reduce using rule 29 (Term)
    EQUAL              reduce using rule 29 (Term)
    IS_EQUAL           reduce using rule 29 (Term)
    NOT_EQUAL          reduce using rule 29 (Term)
    EQUAL_GREATER      reduce using rule 29 (Term)
    PLUS               reduce using rule 29 (Term)
    MINUS              reduce using rule 29 (Term)
    DIVIDE             reduce using rule 29 (Term)
    MULTIPLY           reduce using rule 29 (Term)
    MODULO             reduce using rule 29 (Term)
    CLOSE_PARENTHESIS  reduce using rule 29 (Term)
    AND                reduce using rule 29 (Term)
    OR                 reduce using rule 29 (Term)
    SEMICOLON          reduce using rule 29 (Term)


State 112

   28 Term: Term MULTIPLY Factor •

    EQUAL_LESSER       reduce using rule 28 (Term)
    GREATER_THAN       reduce using rule 28 (Term)
    LESSER_THAN        reduce using rule 28 (Term)
    EQUAL              reduce using rule 28 (Term)
    IS_EQUAL           reduce using rule 28 (Term)
    NOT_EQUAL          reduce using rule 28 (Term)
    EQUAL_GREATER      reduce using rule 28 (Term)
    PLUS               reduce using rule 28 (Term)
    MINUS              reduce using rule 28 (Term)
    DIVIDE             reduce using rule 28 (Term)
    MULTIPLY           reduce using rule 28 (Term)
    MODULO             reduce using rule 28 (Term)
    CLOSE_PARENTHESIS  reduce using rule 28 (Term)
    AND                reduce using rule 28 (Term)
    OR                 reduce using rule 28 (Term)
    SEMICOLON          reduce using rule 28 (Term)


State 113

   30 Term: Term MODULO Factor •

    EQUAL_LESSER       reduce using rule 30 (Term)
    GREATER_THAN       reduce using rule 30 (Term)
    LESSER_THAN        reduce using rule 30 (Term)
    EQUAL              reduce using rule 30 (Term)
    IS_EQUAL           reduce using rule 30 (Term)
    NOT_EQUAL          reduce using rule 30 (Term)
    EQUAL_GREATER      reduce using rule 30 (Term)
    PLUS               reduce using rule 30 (Term)
    MINUS              reduce using rule 30 (Term)
    DIVIDE             reduce using rule 30 (Term)
    MULTIPLY           reduce using rule 30 (Term)
    MODULO             reduce using rule 30 (Term)
    CLOSE_PARENTHESIS  reduce using rule 30 (Term)
    AND                reduce using rule 30 (Term)
    OR                 reduce using rule 30 (Term)
    SEMICOLON          reduce using rule 30 (Term)


State 114

   56 IfStmt: IF OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS • StmtList CLOSE_CURLY_BRACKETS
   57       | IF OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS • StmtList CLOSE_CURLY_BRACKETS ELSE OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

    FLOAT    shift, and go to state 1
    INT      shift, and go to state 2
    CHAR     shift, and go to state 3
    BOOLEAN  shift, and go to state 4
    IF       shift, and go to state 5
    FOR      shift, and go to state 6
    WHILE    shift, and go to state 7
    IDENT    shift, and go to state 8

    CLOSE_CURLY_BRACKETS  reduce using rule 4 (StmtList)

    StmtList  go to state 117
    Stmt      go to state 12
    Decl      go to state 13
    Assi      go to state 14
    IfStmt    go to state 15
    LoopStmt  go to state 16


State 115

   58 LoopStmt: FOR OPEN_PARENTHESIS Init SEMICOLON CondExpr • SEMICOLON Assi CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

    SEMICOLON  shift, and go to state 118


State 116

   59 LoopStmt: WHILE OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS • StmtList CLOSE_CURLY_BRACKETS

    FLOAT    shift, and go to state 1
    INT      shift, and go to state 2
    CHAR     shift, and go to state 3
    BOOLEAN  shift, and go to state 4
    IF       shift, and go to state 5
    FOR      shift, and go to state 6
    WHILE    shift, and go to state 7
    IDENT    shift, and go to state 8

    CLOSE_CURLY_BRACKETS  reduce using rule 4 (StmtList)

    StmtList  go to state 119
    Stmt      go to state 12
    Decl      go to state 13
    Assi      go to state 14
    IfStmt    go to state 15
    LoopStmt  go to state 16


State 117

   56 IfStmt: IF OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList • CLOSE_CURLY_BRACKETS
   57       | IF OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList • CLOSE_CURLY_BRACKETS ELSE OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

    CLOSE_CURLY_BRACKETS  shift, and go to state 120


State 118

   58 LoopStmt: FOR OPEN_PARENTHESIS Init SEMICOLON CondExpr SEMICOLON • Assi CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

    IDENT  shift, and go to state 8

    Assi  go to state 121


State 119

   59 LoopStmt: WHILE OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList • CLOSE_CURLY_BRACKETS

    CLOSE_CURLY_BRACKETS  shift, and go to state 122


State 120

   56 IfStmt: IF OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS •
   57       | IF OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS • ELSE OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

    ELSE  shift, and go to state 123

    $end                  reduce using rule 56 (IfStmt)
    CLOSE_CURLY_BRACKETS  reduce using rule 56 (IfStmt)
    FLOAT                 reduce using rule 56 (IfStmt)
    INT                   reduce using rule 56 (IfStmt)
    CHAR                  reduce using rule 56 (IfStmt)
    BOOLEAN               reduce using rule 56 (IfStmt)
    IF                    reduce using rule 56 (IfStmt)
    FOR                   reduce using rule 56 (IfStmt)
    WHILE                 reduce using rule 56 (IfStmt)
    IDENT                 reduce using rule 56 (IfStmt)


State 121

   58 LoopStmt: FOR OPEN_PARENTHESIS Init SEMICOLON CondExpr SEMICOLON Assi • CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

    CLOSE_PARENTHESIS  shift, and go to state 124


State 122

   59 LoopStmt: WHILE OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS •

    $end                  reduce using rule 59 (LoopStmt)
    CLOSE_CURLY_BRACKETS  reduce using rule 59 (LoopStmt)
    FLOAT                 reduce using rule 59 (LoopStmt)
    INT                   reduce using rule 59 (LoopStmt)
    CHAR                  reduce using rule 59 (LoopStmt)
    BOOLEAN               reduce using rule 59 (LoopStmt)
    IF                    reduce using rule 59 (LoopStmt)
    FOR                   reduce using rule 59 (LoopStmt)
    WHILE                 reduce using rule 59 (LoopStmt)
    IDENT                 reduce using rule 59 (LoopStmt)


State 123

   57 IfStmt: IF OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS ELSE • OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

    OPEN_CURLY_BRACKETS  shift, and go to state 125


State 124

   58 LoopStmt: FOR OPEN_PARENTHESIS Init SEMICOLON CondExpr SEMICOLON Assi CLOSE_PARENTHESIS • OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS

    OPEN_CURLY_BRACKETS  shift, and go to state 126


State 125

   57 IfStmt: IF OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS ELSE OPEN_CURLY_BRACKETS • StmtList CLOSE_CURLY_BRACKETS

    FLOAT    shift, and go to state 1
    INT      shift, and go to state 2
    CHAR     shift, and go to state 3
    BOOLEAN  shift, and go to state 4
    IF       shift, and go to state 5
    FOR      shift, and go to state 6
    WHILE    shift, and go to state 7
    IDENT    shift, and go to state 8

    CLOSE_CURLY_BRACKETS  reduce using rule 4 (StmtList)

    StmtList  go to state 127
    Stmt      go to state 12
    Decl      go to state 13
    Assi      go to state 14
    IfStmt    go to state 15
    LoopStmt  go to state 16


State 126

   58 LoopStmt: FOR OPEN_PARENTHESIS Init SEMICOLON CondExpr SEMICOLON Assi CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS • StmtList CLOSE_CURLY_BRACKETS

    FLOAT    shift, and go to state 1
    INT      shift, and go to state 2
    CHAR     shift, and go to state 3
    BOOLEAN  shift, and go to state 4
    IF       shift, and go to state 5
    FOR      shift, and go to state 6
    WHILE    shift, and go to state 7
    IDENT    shift, and go to state 8

    CLOSE_CURLY_BRACKETS  reduce using rule 4 (StmtList)

    StmtList  go to state 128
    Stmt      go to state 12
    Decl      go to state 13
    Assi      go to state 14
    IfStmt    go to state 15
    LoopStmt  go to state 16


State 127

   57 IfStmt: IF OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS ELSE OPEN_CURLY_BRACKETS StmtList • CLOSE_CURLY_BRACKETS

    CLOSE_CURLY_BRACKETS  shift, and go to state 129


State 128

   58 LoopStmt: FOR OPEN_PARENTHESIS Init SEMICOLON CondExpr SEMICOLON Assi CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList • CLOSE_CURLY_BRACKETS

    CLOSE_CURLY_BRACKETS  shift, and go to state 130


State 129

   57 IfStmt: IF OPEN_PARENTHESIS CondExpr CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS ELSE OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS •

    $end                  reduce using rule 57 (IfStmt)
    CLOSE_CURLY_BRACKETS  reduce using rule 57 (IfStmt)
    FLOAT                 reduce using rule 57 (IfStmt)
    INT                   reduce using rule 57 (IfStmt)
    CHAR                  reduce using rule 57 (IfStmt)
    BOOLEAN               reduce using rule 57 (IfStmt)
    IF                    reduce using rule 57 (IfStmt)
    FOR                   reduce using rule 57 (IfStmt)
    WHILE                 reduce using rule 57 (IfStmt)
    IDENT                 reduce using rule 57 (IfStmt)


State 130

   58 LoopStmt: FOR OPEN_PARENTHESIS Init SEMICOLON CondExpr SEMICOLON Assi CLOSE_PARENTHESIS OPEN_CURLY_BRACKETS StmtList CLOSE_CURLY_BRACKETS •

    $end                  reduce using rule 58 (LoopStmt)
    CLOSE_CURLY_BRACKETS  reduce using rule 58 (LoopStmt)
    FLOAT                 reduce using rule 58 (LoopStmt)
    INT                   reduce using rule 58 (LoopStmt)
    CHAR                  reduce using rule 58 (LoopStmt)
    BOOLEAN               reduce using rule 58 (LoopStmt)
    IF                    reduce using rule 58 (LoopStmt)
    FOR                   reduce using rule 58 (LoopStmt)
    WHILE                 reduce using rule 58 (LoopStmt)
    IDENT                 reduce using rule 58 (LoopStmt)
